// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  isActive      Boolean   @default(true)
  accountRepId  String?
  accountRep    User?     @relation("AccountRepToClient", fields: [accountRepId], references: [id])
  clients       User[]    @relation("AccountRepToClient")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  notifications    Notification[]
  settings        UserSettings?
  givenRatings    ClientSatisfaction[] @relation("ClientRatings")
  receivedRatings ClientSatisfaction[] @relation("RepRatings")
  assignedTickets Ticket[] @relation("AssignedTickets")
  clientTickets   Ticket[] @relation("ClientTickets")
  ticketComments  TicketComment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  isRead      Boolean  @default(false)
  archived    Boolean  @default(false)
  isThreadStart Boolean  @default(false)
  threadId    String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  parent      Message?  @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[] @relation("ThreadReplies")
  attachments MessageAttachment[]

  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([parentId])
}

model Query {
  id          String   @id @default(cuid())
  content     String   @db.Text @default("")
  response    String?  @db.Text
  status      QueryStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  title       String
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model UserSettings {
  id                String   @id @default(cuid())
  emailNotifications Boolean  @default(true)
  theme             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
}

model ClientSatisfaction {
  id          String   @id @default(cuid())
  rating      Float
  feedback    String?  @db.Text
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation("ClientRatings", fields: [userId], references: [id])
  accountRepId String
  accountRep   User     @relation("RepRatings", fields: [accountRepId], references: [id])

  @@index([userId])
  @@index([accountRepId])
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedToId String?
  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id])
  clientId     String
  client       User    @relation("ClientTickets", fields: [clientId], references: [id])
  attachments  TicketAttachment[]
  comments     TicketComment[]
  tags         TicketTag[]

  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([clientId])
}

model TicketAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  
  // Relations
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model TicketTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  
  // Relations
  tickets   Ticket[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  
  // Relations
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

enum QueryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum NotificationType {
  SYSTEM
  MESSAGE
  QUERY_COMPLETE
  REPORT_GENERATED
}
