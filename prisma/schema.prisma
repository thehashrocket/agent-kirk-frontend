// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  queued
  ok
  error
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityStatus {
  SUCCESS
  ERROR
  PENDING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ClientSatisfaction {
  id        String   @id @default(cuid())
  rating    Float
  feedback  String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  userId       String
  user         User   @relation("ClientRatings", fields: [userId], references: [id])
  accountRepId String
  accountRep   User   @relation("RepRatings", fields: [accountRepId], references: [id])

  @@index([userId])
  @@index([accountRepId])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]
}

model Conversation {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  isStarred    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gaAccountId  String?
  gaPropertyId String?
  clientId     String?

  // Relations
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  client     User?       @relation("ClientConversations", fields: [clientId], references: [id])
  queries    Query[]
  gaAccount  GaAccount?  @relation(fields: [gaAccountId], references: [id])
  gaProperty GaProperty? @relation(fields: [gaPropertyId], references: [id])

  @@index([userId])
  @@index([isStarred])
  @@index([clientId])
}

model EmailCampaignContent {
  id              String   @id @default(cuid())
  emailCampaignId String
  subject         String
  htmlContent     String   @db.Text
  plainContent    String   @db.Text
  webId           String
  type            String
  contentType     String
  recipients      Int      @default(0)
  createTime      DateTime
  sendTime        DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  emailCampaign EmailCampaign @relation(fields: [emailCampaignId], references: [id])
}

model EmailCampaign {
  id            String   @id @default(cuid())
  campaignId    String   @unique
  campaignName  String
  emailClientId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  emailClient             EmailClient               @relation(fields: [emailClientId], references: [id])
  emailCampaignContents   EmailCampaignContent[]
  emailCampaignDailyStats EmailCampaignDailyStats[]
}

model EmailCampaignDailyStats {
  id                         String   @id @default(cuid())
  bounceDrops                Int      @default(0)
  bounces                    Int      @default(0)
  clicks                     Int      @default(0)
  cumulativeBounceRate       Int      @default(0)
  cumulativeSpamReportsRate  Int      @default(0)
  cumulativeTotalClickRate   Int      @default(0)
  cumulativeTotalOpenRate    Int      @default(0)
  cumulativeUniqueClickRate  Int      @default(0)
  cumulativeUniqueOpenRate   Int      @default(0)
  cumulativeUnsubscribeRate  Int      @default(0)
  dailyBounceRate            Int      @default(0)
  dailySpamReportsRate       Int      @default(0)
  dailyTotalClickRate        Int      @default(0)
  dailyTotalClickToOpenRate  Int      @default(0)
  dailyTotalOpenRate         Int      @default(0)
  dailyUniqueClickRate       Int      @default(0)
  dailyUniqueClickToOpenRate Int      @default(0)
  dailyUniqueOpenRate        Int      @default(0)
  dailyUnsubscribeRate       Int      @default(0)
  date                       DateTime @db.Date
  delivered                  Int      @default(0)
  emailCampaignId            String
  emailClientId              String
  opens                      Int      @default(0)
  phase                      String
  requests                   Int      @default(0)
  singleSendName             String
  spamReportDrops            Int      @default(0)
  spamReports                Int      @default(0)
  totalClicks                Int      @default(0)
  totalOpens                 Int      @default(0)
  uniqueClicks               Int      @default(0)
  uniqueOpens                Int      @default(0)
  unsubscribes               Int      @default(0)
  variation                  String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relations
  emailClient   EmailClient   @relation(fields: [emailClientId], references: [id])
  emailCampaign EmailCampaign @relation(fields: [emailCampaignId], references: [id])
}

model EmailClient {
  id         String   @id @default(cuid())
  clientName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  emailCampaigns          EmailCampaign[]
  emailClientCredentials  EmailClientCredentials[]
  emailGlobalDailyStats   EmailGlobalDailyStats[]
  emailCampaignDailyStats EmailCampaignDailyStats[]
}

model EmailClientCredentials {
  id            String   @id @default(cuid())
  emailClientId String
  platformName  String
  apiKey        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  emailClient EmailClient @relation(fields: [emailClientId], references: [id])
}

model EmailGlobalDailyStats {
  id            String @id @default(cuid())
  emailClientId String
  opens         Int    @default(0)
  clicks        Int    @default(0)
  bounces       Int    @default(0)
  unsubs        Int    @default(0)

  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  emailClient EmailClient @relation(fields: [emailClientId], references: [id])
}

model GaAccount {
  id               String            @id @default(cuid())
  gaAccountId      String
  gaAccountName    String
  deleted          Boolean           @default(false)
  gaProperties     GaProperty[]      @relation("AccountToProperty")
  conversations    Conversation[]
  userToGaAccounts UserToGaAccount[] @relation("GaAccountToUserAccounts")
}

model GaProperty {
  id             String           @id @default(cuid())
  gaPropertyId   String
  gaPropertyName String
  gaAccountId    String
  gaAccount      GaAccount        @relation("AccountToProperty", fields: [gaAccountId], references: [id], onDelete: Cascade)
  deleted        Boolean          @default(false)
  // relations
  conversations  Conversation[]
  imports        GaImportRun[]
  kpiDaily       GaKpiDaily[]
  kpiMonthly     GaKpiMonthly[]
  channelDaily   GaChannelDaily[]
  sourceDaily    GaSourceDaily[]
}

model GaImportRun {
  id                String       @id @default(cuid())
  gaProperty        GaProperty   @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId      String
  dateStart         DateTime
  dateEnd           DateTime
  status            ImportStatus @default(queued)
  errorMessage      String?
  requestedBy       User         @relation("UserToGaImportRuns", fields: [requestedByUserId], references: [id])
  requestedByUserId String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model GaKpiDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float // 0–1
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float // 0–1
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date])
  @@index([date])
}

model GaKpiMonthly {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  month                     Int // YYYYMM, e.g. 202503
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, month])
  @@index([month])
}

model GaChannelDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  channelGroup              String     @db.VarChar(64)
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date, channelGroup])
  @@index([date])
  @@index([channelGroup])
}

model GaSourceDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  trafficSource             String     @db.VarChar(64)
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date, trafficSource])
  @@index([date])
  @@index([trafficSource])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message {
  id            String   @id @default(cuid())
  content       String   @db.Text
  isRead        Boolean  @default(false)
  archived      Boolean  @default(false)
  isThreadStart Boolean  @default(false)
  threadId      String?
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  senderId    String
  sender      User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User                @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  parent      Message?            @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[]           @relation("ThreadReplies")
  attachments MessageAttachment[]

  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([parentId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model ParsedPieGraphData {
  id      String @id @default(cuid())
  queryId String
  query   Query  @relation(fields: [queryId], references: [id])

  channel String
  source  String

  sessions       Int
  conversionRate Float
  conversions    Int
  bounces        Int

  prevSessionsDiff       Float
  prevConversionRateDiff Float
  prevConversionsDiff    Float
  prevBouncesDiff        Float

  yearSessionsDiff       Float
  yearConversionRateDiff Float
  yearConversionsDiff    Float
  yearBouncesDiff        Float

  createdAt DateTime @default(now())
}

model ParsedQueryData {
  id              String   @id @default(cuid())
  queryId         String
  query           Query    @relation(fields: [queryId], references: [id])
  date            DateTime
  channel         String
  source          String
  sessions        Int
  conversionRate  Float
  conversions     Int
  bounces         Int
  createdAt       DateTime @default(now())
  engagedSessions Int?
  bounceRate      Float?
  newUsers        Int?
}

model ParsedQuerySummary {
  id                   String   @id @default(cuid())
  queryId              String
  date                 DateTime
  totalEngagedSessions Int
  averageBounceRate    Float
  totalNewUsers        Int
  totalConversions     Int
  createdAt            DateTime @default(now())

  query Query @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId, date])
}

model Query {
  id            String               @id @default(cuid())
  content       String               @default("") @db.Text
  response      String?              @db.Text
  status        QueryStatus          @default(PENDING)
  rating        Int                  @default(0)
  metadata      Json?                @db.JsonB
  lineGraphData Json?                @db.JsonB
  pieGraphData  Json?                @db.JsonB
  parsedData    ParsedQueryData[]
  parsedPieData ParsedPieGraphData[]
  parsedSummary ParsedQuerySummary[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now())

  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([conversationId])
}

model SproutFacebookAnalytics {
  createdAt              DateTime            @default(now())
  customerProfileId      Int
  engagements            Int?                @default(0)
  followersCount         Int?                @default(0)
  id                     String              @id @default(cuid())
  impressions            Int?                @default(0)
  impressionsUnique      Int?                @default(0)
  netFollowerGrowth      Int?                @default(0)
  postContentClicks      Int?                @default(0)
  postContentClicksOther Int?                @default(0)
  postLinkClicks         Int?                @default(0)
  postPhotoViewClicks    Int?                @default(0)
  reportingDate          DateTime            @db.Date
  sproutSocialAccount    SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  sproutSocialAccountId  String
  tabViews               Int?                @default(0)
  updatedAt              DateTime            @updatedAt
  videoViews             Int?                @default(0)
  videoViews10s          Int?                @default(0)
  videoViewsOrganic      Int?                @default(0)
  videoViewsPaid         Int?                @default(0)
  videoViewsUnique       Int?                @default(0)

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutFacebookPostAnalytics {
  id                     String              @id @default(cuid())
  angryReactions         Int?                @default(0)
  clientNativeId         String
  commentsCount          Int?                @default(0)
  hahaReactions          Int?                @default(0)
  impressions            Int?                @default(0)
  impressionsFollower    Int?                @default(0)
  impressionsNonFollower Int?                @default(0)
  impressionsNonViral    Int?                @default(0)
  impressionsOrganic     Int?                @default(0)
  impressionsPaid        Int?                @default(0)
  impressionsViral       Int?                @default(0)
  likes                  Int?                @default(0)
  loveReactions          Int?                @default(0)
  postContentClicks      Int?                @default(0)
  postContentClicksOther Int?                @default(0)
  postLinkClicks         Int?                @default(0)
  postNativeId           String
  postPhotoViewClicks    Int?                @default(0)
  postVideoPlayClicks    Int?                @default(0)
  questionAnswers        Int?                @default(0)
  reach                  Int?                @default(0)
  reachFollower          Int?                @default(0)
  reachNonViral          Int?                @default(0)
  reachOrganic           Int?                @default(0)
  reachPaid              Int?                @default(0)
  reachViral             Int?                @default(0)
  reactions              Int?                @default(0)
  reportingDate          DateTime            @db.Date
  sadReactions           Int?                @default(0)
  sharesCount            Int?                @default(0)
  sproutSocialAccountId  String
  videoLength            Int?                @default(0)
  videoViews             Int?                @default(0)
  videoViewsAutoplay     Int?                @default(0)
  videoViewsOrganic      Int?                @default(0)
  videoViewsPaid         Int?                @default(0)
  wowReactions           Int?                @default(0)
  sproutSocialAccount    SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  @@unique([postNativeId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutInstagramAnalytics {
  commentsCount            Int?                                @default(0)
  createdAt                DateTime                            @default(now())
  customerProfileId        Int
  emailContacts            Int?                                @default(0)
  engagements              Int?                                @default(0)
  followersByCity          SproutInstagramFollowersByCity[]
  followersByCountry       SproutInstagramFollowersByCountry[]
  followersCount           Int?                                @default(0)
  getDirectionsClicks      Int?                                @default(0)
  id                       String                              @id @default(cuid())
  impressions              Int?                                @default(0)
  impressionsUnique        Int?                                @default(0)
  likes                    Int?                                @default(0)
  phoneCallClicks          Int?                                @default(0)
  postsSendByContentType   Json?
  postsSentByPostType      Json?
  postsSentCount           Int?                                @default(0)
  profileFollowerAdds      Int?                                @default(0)
  profileFollowers         Int?                                @default(0)
  profileImpressionsUnique Int?                                @default(0)
  profileReachUnique       Int?                                @default(0)
  profileViews             Int?                                @default(0)
  profileViewsUnique       Int?                                @default(0)
  reportingDate            DateTime                            @db.Date
  saves                    Int?                                @default(0)
  sproutSocialAccount      SproutSocialAccount                 @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  sproutSocialAccountId    String
  updatedAt                DateTime                            @updatedAt
  videoViews               Int?                                @default(0)
  websiteClicks            Int?                                @default(0)

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutInstagramFollowersByCity {
  id                         String                   @id @default(cuid())
  sproutInstagramAnalyticsId String
  sproutInstagramAnalytics   SproutInstagramAnalytics @relation(fields: [sproutInstagramAnalyticsId], references: [id], onDelete: Cascade)
  city                       String
  count                      Int                      @default(0)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt

  @@unique([sproutInstagramAnalyticsId, city])
  @@index([sproutInstagramAnalyticsId])
}

model SproutInstagramFollowersByCountry {
  id                         String                   @id @default(cuid())
  sproutInstagramAnalyticsId String
  sproutInstagramAnalytics   SproutInstagramAnalytics @relation(fields: [sproutInstagramAnalyticsId], references: [id], onDelete: Cascade)
  country                    String
  count                      Int                      @default(0)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt

  @@unique([sproutInstagramAnalyticsId, country])
  @@index([sproutInstagramAnalyticsId])
}

model SproutLinkedInAnalytics {
  createdAt             DateTime            @default(now())
  customerProfileId     Int
  engagements           Int?                @default(0)
  followersCount        Int?                @default(0)
  id                    String              @id @default(cuid())
  impressions           Int?                @default(0)
  impressionsUnique     Int?                @default(0)
  reactions             Int?                @default(0)
  reportingDate         DateTime            @db.Date
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  sproutSocialAccountId String
  updatedAt             DateTime            @updatedAt

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutPinterestAnalytics {
  id                    String              @id @default(cuid())
  sproutSocialAccountId String
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  customerProfileId     Int
  reportingDate         DateTime            @db.Date
  followersCount        Int?                @default(0)
  followingCount        Int?                @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([sproutSocialAccountId])
}

model SproutSocialAccount {
  id                    String                        @id @default(cuid())
  customerProfileId     Int                           @unique
  networkType           String
  name                  String
  nativeName            String
  link                  String
  nativeId              String
  groups                Int[]
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  facebookAnalytics     SproutFacebookAnalytics[]
  linkedInAnalytics     SproutLinkedInAnalytics[]
  instagramAnalytics    SproutInstagramAnalytics[]
  pinterestAnalytics    SproutPinterestAnalytics[]
  users                 UserToSproutSocialAccount[]
  facebookPostAnalytics SproutFacebookPostAnalytics[]
}

model UserToSproutSocialAccount {
  id                    String              @id @default(cuid())
  userId                String
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  sproutSocialAccountId String
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@unique([userId, sproutSocialAccountId])
  @@index([userId])
  @@index([sproutSocialAccountId])
}

model UserToGaAccount {
  id          String    @id @default(cuid())
  userId      String
  gaAccountId String
  gaAccount   GaAccount @relation("GaAccountToUserAccounts", fields: [gaAccountId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @db.Timestamp(3)
  updatedAt   DateTime  @updatedAt @db.Timestamp(3)
  user        User      @relation("UserToGaAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gaAccountId])
  @@index([userId])
  @@index([gaAccountId])
}

model User {
  id            String    @id @default(cuid())
  companyId     String?
  name          String?
  deleted       Boolean   @default(false)
  email         String?   @unique
  password      String? // Adding password field as optional since we support both OAuth and password auth
  emailVerified DateTime?
  image         String?
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  isActive      Boolean   @default(true)
  accountRepId  String?
  accountRep    User?     @relation("AccountRepToClient", fields: [accountRepId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts             Account[]
  activities           ClientActivity[]
  assignedTickets      Ticket[]                    @relation("AssignedTickets")
  clientConversations  Conversation[]              @relation("ClientConversations")
  clients              User[]                      @relation("AccountRepToClient")
  clientTickets        Ticket[]                    @relation("ClientTickets")
  company              Company?                    @relation(fields: [companyId], references: [id])
  conversations        Conversation[]
  gaImportRuns         GaImportRun[]               @relation("UserToGaImportRuns")
  givenRatings         ClientSatisfaction[]        @relation("ClientRatings")
  notifications        Notification[]
  queries              Query[]
  receivedMessages     Message[]                   @relation("ReceivedMessages")
  receivedRatings      ClientSatisfaction[]        @relation("RepRatings")
  sentMessages         Message[]                   @relation("SentMessages")
  sessions             Session[]
  settings             UserSettings?
  sproutSocialAccounts UserToSproutSocialAccount[]
  ticketComments       TicketComment[]
  userToGaAccounts     UserToGaAccount[]           @relation("UserToGaAccounts")
}

model UserSettings {
  id                 String   @id @default(cuid())
  emailNotifications Boolean  @default(true)
  theme              String?
  apiCredits         Int      @default(0)
  apiCreditsLimit    Int      @default(1000)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String         @db.Text
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  assignedToId String?
  assignedTo   User?              @relation("AssignedTickets", fields: [assignedToId], references: [id])
  clientId     String
  client       User               @relation("ClientTickets", fields: [clientId], references: [id])
  attachments  TicketAttachment[]
  comments     TicketComment[]
  tags         TicketTag[]

  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([clientId])
}

model TicketAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model TicketTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  tickets Ticket[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())

  // Relations
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model ClientActivity {
  id          String         @id @default(cuid())
  type        String
  description String         @db.Text
  status      ActivityStatus @default(SUCCESS)
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum QueryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum NotificationType {
  SYSTEM
  MESSAGE
  QUERY_COMPLETE
  REPORT_GENERATED
}
