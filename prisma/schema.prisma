// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String       @id @default(cuid())
  content     String
  subject     String?
  archived    Boolean      @default(false)
  senderId    String
  sender      User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User         @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  isRead      Boolean      @default(false)
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parentId    String?      // ID of the parent message (if this is a reply)
  parent      Message?     @relation("MessageThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[]    @relation("MessageThread")
  threadId    String?      // ID to group messages in the same thread
  isThreadStart Boolean    @default(false) // Indicates if this is the first message in a thread

  @@index([senderId])
  @@index([recipientId])
  @@index([parentId])
  @@index([threadId])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  fileSize  Int      // Size in bytes
  mimeType  String
  url       String   // URL to the stored file
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([messageId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?      @default("")
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        String
  isActive      Boolean      @default(true)
  accountRepId  String?
  accountRep    User?        @relation("AccountRepToClient", fields: [accountRepId], references: [id])
  clients       User[]       @relation("AccountRepToClient")
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  notifications    Notification[]
  settings        UserSettings?
  givenRatings    ClientSatisfaction[] @relation("ClientRatings")
  receivedRatings ClientSatisfaction[] @relation("RepRatings")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Query {
  id              String   @id @default(cuid())
  userId          String
  prompt          String   @db.Text
  response        String   @db.Text
  accountGA4      String?
  propertyGA4     String?
  conversationID  String?
  dateToday       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([conversationID])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  content     String
  isRead      Boolean  @default(false)
  link        String?  // Optional link to the related resource
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications    Boolean  @default(true)
  messageNotifications  Boolean  @default(true)
  reportNotifications   Boolean  @default(true)
  apiCredits           Int      @default(0)
  apiCreditsLimit      Int      @default(10000)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model ClientSatisfaction {
  id          String   @id @default(cuid())
  rating      Decimal  @db.Decimal(2,1) // 1-5 star rating with one decimal place
  feedback    String?  @db.Text
  userId      String   // Client who gave the rating
  user        User     @relation("ClientRatings", fields: [userId], references: [id], onDelete: Cascade)
  accountRepId String  // Account Rep being rated
  accountRep  User     @relation("RepRatings", fields: [accountRepId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([accountRepId])
  @@index([createdAt])
}

enum NotificationType {
  MESSAGE_RECEIVED
  REPORT_GENERATED
}
