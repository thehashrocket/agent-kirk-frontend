generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ClientActivity {
  id          String         @id @default(cuid())
  type        String
  description String
  status      ActivityStatus @default(SUCCESS)
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  user        User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model ClientSatisfaction {
  id           String   @id @default(cuid())
  rating       Float
  feedback     String?
  userId       String
  accountRepId String
  createdAt    DateTime @default(now())
  accountRep   User     @relation("RepRatings", fields: [accountRepId], references: [id])
  user         User     @relation("ClientRatings", fields: [userId], references: [id])

  @@index([userId])
  @@index([accountRepId])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Conversation {
  id           String      @id @default(cuid())
  title        String
  isStarred    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  description  String?
  gaAccountId  String?
  gaPropertyId String?
  clientId     String?
  client       User?       @relation("ClientConversations", fields: [clientId], references: [id])
  gaAccount    GaAccount?  @relation(fields: [gaAccountId], references: [id])
  gaProperty   GaProperty? @relation(fields: [gaPropertyId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries      Query[]

  @@index([userId])
  @@index([isStarred])
  @@index([clientId])
}

model EmailCampaign {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  campaignId              String                    @unique
  campaignName            String
  emailClientId           String
  emailClient             EmailClient               @relation(fields: [emailClientId], references: [id])
  emailCampaignContents   EmailCampaignContent?
  emailCampaignDailyStats EmailCampaignDailyStats[]
}

model EmailCampaignContent {
  id              String        @id @default(cuid())
  subject         String
  type            String
  recipients      Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contentType     String
  createTime      DateTime
  emailCampaignId String        @unique
  htmlContent     String
  plainContent    String
  sendTime        DateTime
  webId           String
  emailCampaign   EmailCampaign @relation(fields: [emailCampaignId], references: [id])
}

model EmailCampaignDailyStats {
  id                         String        @id @default(cuid())
  date                       DateTime      @db.Date
  opens                      Int           @default(0)
  clicks                     Int           @default(0)
  bounces                    Int           @default(0)
  unsubscribes               Int           @default(0)
  variation                  String
  phase                      String
  requests                   Int           @default(0)
  delivered                  Int           @default(0)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  bounceDrops                Int           @default(0)
  cumulativeBounceRate       Int           @default(0)
  cumulativeSpamReportsRate  Int           @default(0)
  cumulativeTotalClickRate   Int           @default(0)
  cumulativeTotalOpenRate    Int           @default(0)
  cumulativeUniqueClickRate  Int           @default(0)
  cumulativeUniqueOpenRate   Int           @default(0)
  cumulativeUnsubscribeRate  Int           @default(0)
  dailyBounceRate            Int           @default(0)
  dailySpamReportsRate       Int           @default(0)
  dailyTotalClickRate        Int           @default(0)
  dailyTotalClickToOpenRate  Int           @default(0)
  dailyTotalOpenRate         Int           @default(0)
  dailyUniqueClickRate       Int           @default(0)
  dailyUniqueClickToOpenRate Int           @default(0)
  dailyUniqueOpenRate        Int           @default(0)
  dailyUnsubscribeRate       Int           @default(0)
  emailCampaignId            String
  emailClientId              String
  singleSendName             String
  spamReportDrops            Int           @default(0)
  spamReports                Int           @default(0)
  totalClicks                Int           @default(0)
  totalOpens                 Int           @default(0)
  uniqueClicks               Int           @default(0)
  uniqueOpens                Int           @default(0)
  emailCampaign              EmailCampaign @relation(fields: [emailCampaignId], references: [campaignId])
  emailClient                EmailClient   @relation(fields: [emailClientId], references: [id])

  @@unique([emailCampaignId, date])
}

model EmailClient {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  clientName              String
  emailCampaigns          EmailCampaign[]
  emailCampaignDailyStats EmailCampaignDailyStats[]
  emailClientCredentials  EmailClientCredentials[]
  emailGlobalDailyStats   EmailGlobalDailyStats[]
  users                   UserToEmailClient[]
}

model EmailClientCredentials {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  apiKey        String
  emailClientId String
  platformName  String
  emailClient   EmailClient @relation(fields: [emailClientId], references: [id])

  @@unique([emailClientId, platformName])
}

model EmailGlobalDailyStats {
  id            String      @id @default(cuid())
  date          DateTime    @db.Date
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bounces       Int         @default(0)
  clicks        Int         @default(0)
  emailClientId String
  opens         Int         @default(0)
  unsubs        Int         @default(0)
  emailClient   EmailClient @relation(fields: [emailClientId], references: [id])

  @@unique([emailClientId, date])
}

model GaAccount {
  id               String            @id @default(cuid())
  gaAccountId      String            @unique
  gaAccountName    String
  deleted          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  conversations    Conversation[]
  gaProperties     GaProperty[]      @relation("AccountToProperty")
  userToGaAccounts UserToGaAccount[] @relation("GaAccountToUserAccounts")
}

model GaProperty {
  id             String           @id @default(cuid())
  gaPropertyId   String           @unique
  gaPropertyName String
  gaAccountId    String
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  conversations  Conversation[]
  channelDaily   GaChannelDaily[]
  imports        GaImportRun[]
  kpiDaily       GaKpiDaily[]
  kpiMonthly     GaKpiMonthly[]
  gaAccount      GaAccount        @relation("AccountToProperty", fields: [gaAccountId], references: [id], onDelete: Cascade)
  sourceDaily    GaSourceDaily[]
}

model GaImportRun {
  id                String       @id @default(cuid())
  gaPropertyId      String
  dateStart         DateTime
  dateEnd           DateTime
  status            ImportStatus @default(queued)
  errorMessage      String?
  requestedByUserId String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  gaProperty        GaProperty   @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  requestedBy       User         @relation("UserToGaImportRuns", fields: [requestedByUserId], references: [id])
}

model GaKpiDaily {
  id                        String     @id @default(cuid())
  gaPropertyId              String
  date                      DateTime   @db.Date
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now()) @updatedAt
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)

  @@unique([gaPropertyId, date])
  @@index([date])
}

model GaKpiMonthly {
  id                        String     @id @default(cuid())
  gaPropertyId              String
  month                     Int
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now()) @updatedAt
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)

  @@unique([gaPropertyId, month])
  @@index([month])
}

model GaChannelDaily {
  id                        String     @id @default(cuid())
  gaPropertyId              String
  date                      DateTime   @db.Date
  channelGroup              String     @db.VarChar(64)
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now()) @updatedAt
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)

  @@unique([gaPropertyId, date, channelGroup])
  @@index([date])
  @@index([channelGroup])
}

model GaSourceDaily {
  id                        String     @id @default(cuid())
  gaPropertyId              String
  date                      DateTime   @db.Date
  trafficSource             String     @db.VarChar(64)
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now()) @updatedAt
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)

  @@unique([gaPropertyId, date, trafficSource])
  @@index([date])
  @@index([trafficSource])
}

model Log {
  id               String  @id @default(cuid())
  eventMessage     String?
  eventType        String?
  errorMessage     String?
  errorStackTrace  String?
  message          String?
  metrics          Json?
  nodeName         String?
  payload          Json?
  queryId          String?
  query            Query?  @relation(fields: [queryId], references: [id])
  sourceReferences Json?
  userId           String?
  user             User?   @relation(fields: [userId], references: [id])
  workflowName     String?

  // Environment & Context Fields
  environment String?
  serviceName String?
  version     String?

  // Request/Response Tracking
  requestId String?
  sessionId String?
  ipAddress String?
  userAgent String?

  // Performance & Monitoring
  duration    Int?
  memoryUsage Int?
  cpuUsage    Float?

  // Security & Audit
  severity        String?
  isAuthenticated Boolean?
  permissions     Json?

  // LLM-Specific Fields
  modelName   String?
  tokenUsage  Json?
  temperature Float?
  maxTokens   Int?

  // Client-Specific Fields
  clientId      String?
  pageUrl       String?
  componentName String?

  // Enhanced Error Tracking
  errorCode     String?
  errorCategory String?
  retryCount    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([queryId])
  @@index([createdAt])
  @@index([environment])
  @@index([serviceName])
  @@index([severity])
  @@index([requestId])
  @@index([clientId])
  @@index([errorCode])
}

model Memory {
  id        String   @id @default(cuid())
  content   String
  queryId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation("UserToMemory", fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id            String              @id @default(cuid())
  content       String
  senderId      String
  recipientId   String
  isRead        Boolean             @default(false)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  archived      Boolean             @default(false)
  isThreadStart Boolean             @default(false)
  parentId      String?
  threadId      String?
  parent        Message?            @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Message[]           @relation("ThreadReplies")
  recipient     User                @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  sender        User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  attachments   MessageAttachment[]

  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([parentId])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model ParsedPieGraphData {
  id                     String   @id @default(cuid())
  queryId                String
  channel                String
  source                 String
  sessions               Int
  conversionRate         Float
  conversions            Int
  bounces                Int
  prevSessionsDiff       Float
  prevConversionRateDiff Float
  prevConversionsDiff    Float
  prevBouncesDiff        Float
  yearSessionsDiff       Float
  yearConversionRateDiff Float
  yearConversionsDiff    Float
  yearBouncesDiff        Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt
  query                  Query    @relation(fields: [queryId], references: [id])
}

model ParsedQueryData {
  id              String   @id @default(cuid())
  queryId         String
  date            DateTime
  channel         String
  source          String
  sessions        Int
  conversionRate  Float
  conversions     Int
  bounces         Int
  createdAt       DateTime @default(now())
  bounceRate      Float?
  engagedSessions Int?
  newUsers        Int?
  query           Query    @relation(fields: [queryId], references: [id])
}

model ParsedQuerySummary {
  id                   String   @id @default(cuid())
  queryId              String
  date                 DateTime
  totalEngagedSessions Int
  averageBounceRate    Float
  totalNewUsers        Int
  totalConversions     Int
  createdAt            DateTime @default(now())
  query                Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId, date])
}

model Query {
  id             String               @id @default(cuid())
  userId         String
  response       String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  content        String               @default("")
  status         QueryStatus          @default(PENDING)
  conversationId String?
  rating         Int                  @default(0)
  metadata       Json?
  lineGraphData  Json?
  pieGraphData   Json?
  parsedPieData  ParsedPieGraphData[]
  parsedData     ParsedQueryData[]
  parsedSummary  ParsedQuerySummary[]
  conversation   Conversation?        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User                 @relation(fields: [userId], references: [id])
  Log            Log[]

  @@index([userId])
  @@index([status])
  @@index([conversationId])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SproutFacebookAnalytics {
  id                     String              @id @default(cuid())
  sproutSocialAccountId  String
  customerProfileId      Int
  reportingDate          DateTime            @db.Date
  engagements            Int?                @default(0)
  impressions            Int?                @default(0)
  impressionsUnique      Int?                @default(0)
  followersCount         Int?                @default(0)
  postContentClicks      Int?                @default(0)
  postContentClicksOther Int?                @default(0)
  postLinkClicks         Int?                @default(0)
  postPhotoViewClicks    Int?                @default(0)
  tabViews               Int?                @default(0)
  videoViews             Int?                @default(0)
  videoViews10s          Int?                @default(0)
  videoViewsOrganic      Int?                @default(0)
  videoViewsPaid         Int?                @default(0)
  videoViewsUnique       Int?                @default(0)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @default(now()) @updatedAt
  netFollowerGrowth      Int?                @default(0)
  sproutSocialAccount    SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutFacebookPost {
  id                    String              @id @default(cuid())
  sproutSocialAccountId String
  postType              String
  postStatus            String
  postLink              String
  postText              String
  postNativeId          String
  postCreatedTime       DateTime
  postSentTime          DateTime
  postLastUpdated       DateTime
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now()) @updatedAt
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)

  @@unique([sproutSocialAccountId, postNativeId])
  @@index([sproutSocialAccountId])
}

model SproutFacebookPostAnalytics {
  id                     String              @id @default(cuid())
  angryReactions         Int?                @default(0)
  clientNativeId         String
  commentsCount          Int?                @default(0)
  hahaReactions          Int?                @default(0)
  impressions            Int?                @default(0)
  impressionsFollower    Int?                @default(0)
  impressionsNonFollower Int?                @default(0)
  impressionsNonViral    Int?                @default(0)
  impressionsOrganic     Int?                @default(0)
  impressionsPaid        Int?                @default(0)
  impressionsViral       Int?                @default(0)
  likes                  Int?                @default(0)
  loveReactions          Int?                @default(0)
  postContentClicks      Int?                @default(0)
  postContentClicksOther Int?                @default(0)
  postLinkClicks         Int?                @default(0)
  postNativeId           String
  postPhotoViewClicks    Int?                @default(0)
  postVideoPlayClicks    Int?                @default(0)
  questionAnswers        Int?                @default(0)
  reach                  Int?                @default(0)
  reachFollower          Int?                @default(0)
  reachNonViral          Int?                @default(0)
  reachOrganic           Int?                @default(0)
  reachPaid              Int?                @default(0)
  reachViral             Int?                @default(0)
  reactions              Int?                @default(0)
  reportingDate          DateTime            @db.Date
  sadReactions           Int?                @default(0)
  sharesCount            Int?                @default(0)
  sproutSocialAccountId  String
  videoLength            Int?                @default(0)
  videoViews             Int?                @default(0)
  videoViewsAutoplay     Int?                @default(0)
  videoViewsOrganic      Int?                @default(0)
  videoViewsPaid         Int?                @default(0)
  wowReactions           Int?                @default(0)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  sproutSocialAccount    SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)

  @@unique([postNativeId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutInstagramAnalytics {
  id                       String                              @id @default(cuid())
  sproutSocialAccountId    String
  customerProfileId        Int
  reportingDate            DateTime                            @db.Date
  commentsCount            Int?                                @default(0)
  engagements              Int?                                @default(0)
  impressions              Int?                                @default(0)
  impressionsUnique        Int?                                @default(0)
  followersCount           Int?                                @default(0)
  likes                    Int?                                @default(0)
  saves                    Int?                                @default(0)
  videoViews               Int?                                @default(0)
  createdAt                DateTime                            @default(now())
  updatedAt                DateTime                            @updatedAt
  emailContacts            Int?                                @default(0)
  getDirectionsClicks      Int?                                @default(0)
  phoneCallClicks          Int?                                @default(0)
  postsSendByContentType   Json?
  postsSentByPostType      Json?
  postsSentCount           Int?                                @default(0)
  profileFollowerAdds      Int?                                @default(0)
  profileFollowers         Int?                                @default(0)
  profileImpressionsUnique Int?                                @default(0)
  profileReachUnique       Int?                                @default(0)
  profileViews             Int?                                @default(0)
  profileViewsUnique       Int?                                @default(0)
  websiteClicks            Int?                                @default(0)
  sproutSocialAccount      SproutSocialAccount                 @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  followersByCity          SproutInstagramFollowersByCity[]
  followersByCountry       SproutInstagramFollowersByCountry[]

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutInstagramFollowersByCity {
  id                         String                   @id @default(cuid())
  sproutInstagramAnalyticsId String
  city                       String
  count                      Int                      @default(0)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  sproutInstagramAnalytics   SproutInstagramAnalytics @relation(fields: [sproutInstagramAnalyticsId], references: [id], onDelete: Cascade)

  @@unique([sproutInstagramAnalyticsId, city])
  @@index([sproutInstagramAnalyticsId])
}

model SproutInstagramFollowersByCountry {
  id                         String                   @id @default(cuid())
  sproutInstagramAnalyticsId String
  country                    String
  count                      Int                      @default(0)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  sproutInstagramAnalytics   SproutInstagramAnalytics @relation(fields: [sproutInstagramAnalyticsId], references: [id], onDelete: Cascade)

  @@unique([sproutInstagramAnalyticsId, country])
  @@index([sproutInstagramAnalyticsId])
}

model SproutLinkedInAnalytics {
  id                    String              @id @default(cuid())
  sproutSocialAccountId String
  customerProfileId     Int
  reportingDate         DateTime            @db.Date
  engagements           Int?                @default(0)
  impressions           Int?                @default(0)
  impressionsUnique     Int?                @default(0)
  followersCount        Int?                @default(0)
  reactions             Int?                @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)

  @@unique([customerProfileId, reportingDate])
  @@index([sproutSocialAccountId])
}

model SproutPinterestAnalytics {
  id                    String              @id @default(cuid())
  sproutSocialAccountId String
  customerProfileId     Int
  reportingDate         DateTime            @db.Date
  followersCount        Int?                @default(0)
  followingCount        Int?                @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)

  @@index([sproutSocialAccountId])
}

model SproutSocialAccount {
  id                    String                        @id @default(cuid())
  customerProfileId     Int                           @unique
  networkType           String
  name                  String
  nativeName            String
  link                  String
  nativeId              String
  groups                Int[]
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  facebookAnalytics     SproutFacebookAnalytics[]
  facebookPosts         SproutFacebookPost[]
  facebookPostAnalytics SproutFacebookPostAnalytics[]
  instagramAnalytics    SproutInstagramAnalytics[]
  linkedInAnalytics     SproutLinkedInAnalytics[]
  pinterestAnalytics    SproutPinterestAnalytics[]
  users                 UserToSproutSocialAccount[]
}

model Ticket {
  id           String             @id @default(cuid())
  title        String
  description  String
  status       TicketStatus       @default(OPEN)
  priority     TicketPriority     @default(MEDIUM)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  assignedToId String?
  clientId     String
  assignedTo   User?              @relation("AssignedTickets", fields: [assignedToId], references: [id])
  client       User               @relation("ClientTickets", fields: [clientId], references: [id])
  attachments  TicketAttachment[]
  comments     TicketComment[]
  tags         TicketTag[]        @relation("TicketToTicketTag")

  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([clientId])
}

model TicketAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  tickets   Ticket[] @relation("TicketToTicketTag")
}

model UserToSproutSocialAccount {
  id                    String              @id @default(cuid())
  userId                String
  sproutSocialAccountId String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  sproutSocialAccount   SproutSocialAccount @relation(fields: [sproutSocialAccountId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sproutSocialAccountId])
  @@index([userId])
  @@index([sproutSocialAccountId])
}

model UserToGaAccount {
  id          String    @id @default(cuid())
  userId      String
  gaAccountId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  gaAccount   GaAccount @relation("GaAccountToUserAccounts", fields: [gaAccountId], references: [id], onDelete: Cascade)
  user        User      @relation("UserToGaAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gaAccountId])
  @@index([userId])
  @@index([gaAccountId])
}

model User {
  id                   String                      @id @default(cuid())
  email                String?                     @unique
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  roleId               String
  emailVerified        DateTime?
  image                String?
  name                 String?
  accountRepId         String?
  isActive             Boolean                     @default(true)
  password             String?
  deleted              Boolean                     @default(false)
  companyId            String?
  accounts             Account[]
  activities           ClientActivity[]
  receivedRatings      ClientSatisfaction[]        @relation("RepRatings")
  givenRatings         ClientSatisfaction[]        @relation("ClientRatings")
  clientConversations  Conversation[]              @relation("ClientConversations")
  conversations        Conversation[]
  gaImportRuns         GaImportRun[]               @relation("UserToGaImportRuns")
  receivedMessages     Message[]                   @relation("ReceivedMessages")
  sentMessages         Message[]                   @relation("SentMessages")
  notifications        Notification[]
  queries              Query[]
  sessions             Session[]
  assignedTickets      Ticket[]                    @relation("AssignedTickets")
  clientTickets        Ticket[]                    @relation("ClientTickets")
  ticketComments       TicketComment[]
  memories             Memory[]                    @relation("UserToMemory")
  accountRep           User?                       @relation("AccountRepToClient", fields: [accountRepId], references: [id])
  clients              User[]                      @relation("AccountRepToClient")
  company              Company?                    @relation(fields: [companyId], references: [id])
  role                 Role                        @relation(fields: [roleId], references: [id])
  settings             UserSettings?
  emailClients         UserToEmailClient[]
  userToGaAccounts     UserToGaAccount[]           @relation("UserToGaAccounts")
  sproutSocialAccounts UserToSproutSocialAccount[]
  Log                  Log[]
  UserToUspsClient     UserToUspsClient[]
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  theme              String?
  apiCredits         Int      @default(0)
  apiCreditsLimit    Int      @default(1000)
  user               User     @relation(fields: [userId], references: [id])
}

model UserToEmailClient {
  id            String      @id @default(cuid())
  userId        String
  emailClientId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailClient   EmailClient @relation(fields: [emailClientId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, emailClientId])
  @@index([userId])
  @@index([emailClientId])
}

model UserToUspsClient {
  id           String     @id @default(cuid())
  userId       String
  uspsClientId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  uspsClient   UspsClient @relation(fields: [uspsClientId], references: [id], onDelete: Cascade) // Clients can have multiple users
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Users can be linked to multiple USPS clients

  @@unique([userId, uspsClientId])
  @@index([userId])
  @@index([uspsClientId])
}

model UspsCampaign {
  id                  String                 @id @default(cuid())
  campaignName        String
  order               String
  reportId            String
  sector              String
  sendDate            DateTime               @db.Date
  type                String
  uspsClientId        String
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @default(now()) @updatedAt
  uspsCampaignZips    UspsCampaignZipStats[] @relation("UspsCampaignToZipStats")
  uspsCampaignSummary UspsCampaignSummary[]  @relation("UspsCampaignToSummary")
  UspsClient          UspsClient             @relation("UspsClientToCampaigns", fields: [uspsClientId], references: [id]) // Campaigns belong to a USPS client

  @@unique([campaignName])
  @@index([campaignName])
}

model UspsCampaignSummary {
  id               String       @id @default(cuid())
  finalScanCount   Int
  mailDate         DateTime     @db.Date
  numberDelivered  Int
  percentDelivered Float
  percentFinalScan Float
  percentOnTime    Float
  percentScanned   Float
  pieces           Int
  reportId         String
  scanDate         DateTime     @db.Date
  totalScanned     Int
  uspsCampaignId   String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  UspsCampaign     UspsCampaign @relation("UspsCampaignToSummary", fields: [uspsCampaignId], references: [id])

  @@unique([scanDate, uspsCampaignId])
  @@index([scanDate, mailDate, uspsCampaignId, reportId])
}

model UspsCampaignZipStats {
  id             String       @id @default(cuid())
  date           DateTime     @db.Date
  scans          Int
  uspsCampaignId String
  zipCode        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  UspsCampaign   UspsCampaign @relation("UspsCampaignToZipStats", fields: [uspsCampaignId], references: [id])

  @@index([uspsCampaignId])
}

model UspsClient {
  id               String             @id @default(cuid())
  clientName       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  uspsCampaigns    UspsCampaign[]     @relation("UspsClientToCampaigns") // Clients can have multiple campaigns
  UserToUspsClient UserToUspsClient[] // Users can be linked to multiple USPS clients
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ImportStatus {
  queued
  ok
  error
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityStatus {
  SUCCESS
  ERROR
  PENDING
}

enum QueryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum NotificationType {
  SYSTEM
  MESSAGE
  QUERY_COMPLETE
  QUERY_IN_PROGRESS
  QUERY_FAILED
  REPORT_GENERATED
}
