// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ImportStatus {
  queued
  ok
  error
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActivityStatus {
  SUCCESS
  ERROR
  PENDING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ClientSatisfaction {
  id        String   @id @default(cuid())
  rating    Float
  feedback  String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  userId       String
  user         User   @relation("ClientRatings", fields: [userId], references: [id])
  accountRepId String
  accountRep   User   @relation("RepRatings", fields: [accountRepId], references: [id])

  @@index([userId])
  @@index([accountRepId])
}

model Conversation {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  isStarred    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gaAccountId  String?
  gaPropertyId String?

  // Relations
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries    Query[]
  gaAccount  GaAccount?  @relation(fields: [gaAccountId], references: [id])
  gaProperty GaProperty? @relation(fields: [gaPropertyId], references: [id])

  @@index([userId])
  @@index([isStarred])
}

model GaAccount {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation("UserToGaAccount", fields: [userId], references: [id], onDelete: Cascade)
  gaAccountId   String
  gaAccountName String
  gaProperties  GaProperty[]   @relation("AccountToProperty")
  conversations Conversation[]
}

model GaProperty {
  id             String    @id @default(cuid())
  gaPropertyId   String
  gaPropertyName String
  gaAccountId    String
  gaAccount      GaAccount @relation("AccountToProperty", fields: [gaAccountId], references: [id], onDelete: Cascade)

  // relations
  conversations Conversation[]
  imports       GaImportRun[]
  kpiDaily      GaKpiDaily[]
  kpiMonthly    GaKpiMonthly[]
  channelDaily  GaChannelDaily[]
  sourceDaily   GaSourceDaily[]
}

model GaImportRun {
  id                String       @id @default(cuid())
  gaProperty        GaProperty   @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId      String
  dateStart         DateTime
  dateEnd           DateTime
  status            ImportStatus @default(queued)
  errorMessage      String?
  requestedBy       User         @relation("UserToGaImportRuns", fields: [requestedByUserId], references: [id])
  requestedByUserId String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model GaKpiDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float // 0–1
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float // 0–1
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date])
  @@index([date])
}

model GaKpiMonthly {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  month                     Int // YYYYMM, e.g. 202503
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, month])
  @@index([month])
}

model GaChannelDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  channelGroup              String     @db.VarChar(64)
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date, channelGroup])
  @@index([date])
  @@index([channelGroup])
}

model GaSourceDaily {
  id                        String     @id @default(cuid())
  gaProperty                GaProperty @relation(fields: [gaPropertyId], references: [id], onDelete: Cascade)
  gaPropertyId              String
  date                      DateTime   @db.Date
  trafficSource             String     @db.VarChar(64)
  // metrics
  sessions                  Int
  screenPageViewsPerSession Float
  engagementRate            Float
  avgSessionDurationSec     Int
  goalCompletions           Int
  goalCompletionRate        Float
  createdAt                 DateTime   @default(now())

  @@unique([gaPropertyId, date, trafficSource])
  @@index([date])
  @@index([trafficSource])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message {
  id            String   @id @default(cuid())
  content       String   @db.Text
  isRead        Boolean  @default(false)
  archived      Boolean  @default(false)
  isThreadStart Boolean  @default(false)
  threadId      String?
  parentId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  senderId    String
  sender      User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User                @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  parent      Message?            @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Message[]           @relation("ThreadReplies")
  attachments MessageAttachment[]

  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([parentId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model ParsedPieGraphData {
  id      String @id @default(cuid())
  queryId String
  query   Query  @relation(fields: [queryId], references: [id])

  channel String
  source  String

  sessions       Int
  conversionRate Float
  conversions    Int
  bounces        Int

  prevSessionsDiff       Float
  prevConversionRateDiff Float
  prevConversionsDiff    Float
  prevBouncesDiff        Float

  yearSessionsDiff       Float
  yearConversionRateDiff Float
  yearConversionsDiff    Float
  yearBouncesDiff        Float

  createdAt DateTime @default(now())
}

model ParsedQueryData {
  id              String   @id @default(cuid())
  queryId         String
  query           Query    @relation(fields: [queryId], references: [id])
  date            DateTime
  channel         String
  source          String
  sessions        Int
  conversionRate  Float
  conversions     Int
  bounces         Int
  createdAt       DateTime @default(now())
  engagedSessions Int?
  bounceRate      Float?
  newUsers        Int?
}

model ParsedQuerySummary {
  id                   String   @id @default(cuid())
  queryId              String
  date                 DateTime
  totalEngagedSessions Int
  averageBounceRate    Float
  totalNewUsers        Int
  totalConversions     Int
  createdAt            DateTime @default(now())

  query Query @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId, date])
}

model Query {
  id            String               @id @default(cuid())
  content       String               @default("") @db.Text
  response      String?              @db.Text
  status        QueryStatus          @default(PENDING)
  rating        Int                  @default(0)
  metadata      Json?                @db.JsonB
  lineGraphData Json?                @db.JsonB
  pieGraphData  Json?                @db.JsonB
  parsedData    ParsedQueryData[]
  parsedPieData ParsedPieGraphData[]
  parsedSummary ParsedQuerySummary[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now())

  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([conversationId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String? // Adding password field as optional since we support both OAuth and password auth
  emailVerified DateTime?
  image         String?
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  isActive      Boolean   @default(true)
  accountRepId  String?
  accountRep    User?     @relation("AccountRepToClient", fields: [accountRepId], references: [id])
  clients       User[]    @relation("AccountRepToClient")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  queries          Query[]
  conversations    Conversation[]
  sentMessages     Message[]            @relation("SentMessages")
  receivedMessages Message[]            @relation("ReceivedMessages")
  notifications    Notification[]
  settings         UserSettings?
  givenRatings     ClientSatisfaction[] @relation("ClientRatings")
  receivedRatings  ClientSatisfaction[] @relation("RepRatings")
  assignedTickets  Ticket[]             @relation("AssignedTickets")
  clientTickets    Ticket[]             @relation("ClientTickets")
  ticketComments   TicketComment[]
  activities       ClientActivity[]
  gaAccounts       GaAccount[]          @relation("UserToGaAccount")
  gaImportRuns     GaImportRun[]        @relation("UserToGaImportRuns")
}

model UserSettings {
  id                 String   @id @default(cuid())
  emailNotifications Boolean  @default(true)
  theme              String?
  apiCredits         Int      @default(0)
  apiCreditsLimit    Int      @default(1000)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String         @id @default(cuid())
  title       String
  description String         @db.Text
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  assignedToId String?
  assignedTo   User?              @relation("AssignedTickets", fields: [assignedToId], references: [id])
  clientId     String
  client       User               @relation("ClientTickets", fields: [clientId], references: [id])
  attachments  TicketAttachment[]
  comments     TicketComment[]
  tags         TicketTag[]

  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([clientId])
}

model TicketAttachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model TicketTag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  tickets Ticket[]
}

model MessageAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())

  // Relations
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model ClientActivity {
  id          String         @id @default(cuid())
  type        String
  description String         @db.Text
  status      ActivityStatus @default(SUCCESS)
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum QueryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum NotificationType {
  SYSTEM
  MESSAGE
  QUERY_COMPLETE
  REPORT_GENERATED
}
